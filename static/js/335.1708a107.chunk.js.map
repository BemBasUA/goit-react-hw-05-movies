{"version":3,"file":"static/js/335.1708a107.chunk.js","mappings":"sKAAO,IAAMA,EAAU,kC,uJCKvB,aAAO,OAAP,oBAAO,WAA+BC,GAA/B,iFACQC,EAAAA,GAAAA,IACNA,EAAAA,GAAAA,SAAAA,QAAA,gBAAkCD,EAAlC,YAAgD,CACnDE,OAAQ,CACNC,QAASJ,EAAAA,KAGZK,MAAK,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,OAAf,IAPR,0GAFPN,EAAAA,GAAAA,SAAAA,QAAyB,gC,aCsCzB,EArCgB,WACd,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAgBC,EAAAA,EAAAA,SAAO,GAgB7B,OAdAC,EAAAA,EAAAA,YAAU,YACsB,IAA1BF,EAAcG,UAGlBH,EAAcG,SAAU,EDRrB,SAAP,kCCSIC,CAAgBN,GAASP,MAAK,SAAAK,GAC5BA,EAAQS,KAAI,SAAAC,GACV,OAAOT,GAAW,SAAAU,GAAS,wBACtBA,GADsB,CAEzB,CAAEpB,GAAImB,EAAOnB,GAAIqB,OAAQF,EAAOE,OAAQC,QAASH,EAAOG,UAF/B,GAI5B,GACF,IACF,GAAE,CAACX,IACAF,EAAQc,QAAU,GAElB,yBACGd,EAAQS,KAAI,SAAAC,GACX,OACE,2BACE,oCAAYA,EAAOE,WACnB,uBAAIF,EAAOG,YAFJH,EAAOnB,GAKnB,OAIE,qEAEV,C","sources":["assets/API_KEY.js","utils/getMovieReviews.js","components/Reviews/Reviews.jsx"],"sourcesContent":["export const API_KEY = 'd7682ca325a3faf9378f6270ac4d001d';\n","import axios from 'axios';\nimport { API_KEY } from 'assets/API_KEY';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getMovieReviews(id) {\n  return await axios\n    .get(axios.defaults.baseURL + `movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(movie => movie.data.results);\n}\n","import { useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'utils/getMovieReviews';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRender.current === false) {\n      return;\n    }\n    isFirstRender.current = false;\n    getMovieReviews(movieId).then(reviews => {\n      reviews.map(review => {\n        return setReviews(prevState => [\n          ...prevState,\n          { id: review.id, author: review.author, content: review.content },\n        ]);\n      });\n    });\n  }, [movieId]);\n  if (reviews.length >= 1) {\n    return (\n      <div>\n        {reviews.map(review => {\n          return (\n            <li key={review.id}>\n              <p>Author: {review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          );\n        })}\n      </div>\n    );\n  } else {\n    return <div>We don't have any reviews for this movie</div>;\n  }\n};\n\nexport default Reviews;\n"],"names":["API_KEY","id","axios","params","api_key","then","movie","data","results","useState","reviews","setReviews","movieId","useParams","isFirstRender","useRef","useEffect","current","getMovieReviews","map","review","prevState","author","content","length"],"sourceRoot":""}